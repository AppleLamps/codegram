// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  username      String?   @unique
  password      String?
  bio           String?
  website       String?
  location      String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts      Account[]
  sessions      Session[]
  snippets      Snippet[]
  likes         Like[]
  comments      Comment[]
  followers     Follow[]  @relation("UserFollowers")
  following     Follow[]  @relation("UserFollowing")
  notifications Notification[]
  sentNotifications Notification[] @relation("NotificationFromUser")

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Snippet {
  id          String   @id @default(cuid())
  title       String
  description String?
  code        String   @db.Text
  language    String
  isPublic    Boolean  @default(true)
  authorId    String
  parentId    String?  // For remixes/forks
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  author       User          @relation(fields: [authorId], references: [id], onDelete: Cascade)
  parent       Snippet?      @relation("SnippetForks", fields: [parentId], references: [id])
  forks        Snippet[]     @relation("SnippetForks")
  tags         SnippetTag[]
  likes        Like[]
  comments     Comment[]
  notifications Notification[]

  @@map("snippets")
}

model Tag {
  id        String   @id @default(cuid())
  name      String   @unique
  color     String?
  createdAt DateTime @default(now())

  snippets SnippetTag[]

  @@map("tags")
}

model SnippetTag {
  id        String @id @default(cuid())
  snippetId String
  tagId     String

  snippet Snippet @relation(fields: [snippetId], references: [id], onDelete: Cascade)
  tag     Tag     @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@unique([snippetId, tagId])
  @@map("snippet_tags")
}

model Like {
  id        String   @id @default(cuid())
  userId    String
  snippetId String
  createdAt DateTime @default(now())

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  snippet Snippet @relation(fields: [snippetId], references: [id], onDelete: Cascade)

  @@unique([userId, snippetId])
  @@map("likes")
}

model Comment {
  id        String   @id @default(cuid())
  content   String   @db.Text
  userId    String
  snippetId String
  parentId  String?  // For nested comments
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  snippet  Snippet   @relation(fields: [snippetId], references: [id], onDelete: Cascade)
  parent   Comment?  @relation("CommentReplies", fields: [parentId], references: [id])
  replies  Comment[] @relation("CommentReplies")

  @@map("comments")
}

model Follow {
  id          String   @id @default(cuid())
  followerId  String
  followingId String
  createdAt   DateTime @default(now())

  follower  User @relation("UserFollowers", fields: [followerId], references: [id], onDelete: Cascade)
  following User @relation("UserFollowing", fields: [followingId], references: [id], onDelete: Cascade)

  @@unique([followerId, followingId])
  @@map("follows")
}

model Notification {
  id         String            @id @default(cuid())
  type       NotificationType
  message    String
  read       Boolean           @default(false)
  userId     String
  fromUserId String?
  snippetId  String?
  createdAt  DateTime          @default(now())

  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  fromUser User?    @relation("NotificationFromUser", fields: [fromUserId], references: [id], onDelete: SetNull)
  snippet  Snippet? @relation(fields: [snippetId], references: [id], onDelete: SetNull)

  @@map("notifications")
}

enum NotificationType {
  LIKE
  COMMENT
  FOLLOW
  REMIX
}
